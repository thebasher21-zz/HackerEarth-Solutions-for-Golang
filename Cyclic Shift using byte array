package main 
import (
    f "fmt"
    b "bufio"
    by "bytes"
    "os"
)

func find_max(a []byte, N int) (max []byte, next int){
    var r []byte
    max = a
    found_max := false
    next = 1
    r = append(a[next%N:], a[:next%N]...)
    for ;found_max==false ;{
        p:=by.Compare(max, r)
        if p==0{
            found_max=true
            break
        } else {
            if p == -1 {
                max = r
            }
        }
        next+=1
        r = append(r[1:], r[:1]...)
    }
    return max, next
     
} 

func return_max(a []byte, N, K int) (next int) {
    max, n := find_max(a, N)
    if n > N {
        return (n-N) + ((K-1) * N)
    }
    var r []byte
    found_max := 0
    next = 1
    r = append(max[next%N:], max[:next%N]...)
    for ;found_max<=K; {
        if by.Compare(max, r) == 0{
            found_max+=1
        }
        if found_max >= 1 {
            break
        } else {
            next+=1
            r = append(r[1:], r[:1]...)
        }
    }
    return (n-next) + (K-1)*(next)
}

func main() {
    var T int 
    var N, K int
    var L string
    in := b.NewReader(os.Stdin)
    f.Fscan(in, &T)
    for ; T>0; T-- {
        f.Fscan(in, &N, &K)
        f.Fscan(in, &L)
        mat := []byte(L)
        max := return_max(mat, N, K)
        f.Println(max)  
    }
}
